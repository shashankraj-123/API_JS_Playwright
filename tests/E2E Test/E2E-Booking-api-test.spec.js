const { test, expect, request } = require("@playwright/test");
const { APIUtils } = require("../../Utils/APIUtils");

/*
⁡⁢⁣⁢Reading Test Data⁡
Reading data from the data json files present under data folder
*/
const createBookingTestData = JSON.parse(
  JSON.stringify(require("../../data/createBookingData.json"))
);
const getBookingData = JSON.parse(
  JSON.stringify(require("../../data/getBooking.json"))
);

const createTokenData = JSON.parse(
  JSON.stringify(require("../../data/createTokenData.json"))
);

let token, bookingId, bookingDetails;
/*
⁡⁢⁣⁢​‌‍‌𝗧𝗲𝘀𝘁 𝟭​⁡
This code is a Playwright test that generates a token by calling an API endpoint and validates the response. Here's what it does:

The test function is defined using the test function from the Playwright library.
A message is logged to the console indicating that a token is being generated.
An API context is created using request.newContext().
An instance of the APIUtils class is created, passing in the apiContext.
A token is generated using the getToken() method from the apiUtils object, passing in a URL, username, and password.
The response body is parsed into JSON format using the .json() method.
The HTTP status code of the response is validated using the expect function from the Jest assertion library.
The token generated by the server is extracted from the response body and saved to a variable.
A message is logged to the console providing the generated token.
A message is logged to the console indicating that the token was created successfully.
The code tests the functionality of an API endpoint that generates a token. By validating the response payload, headers, and status code, the test ensures that the token generation process is functioning as expected.
*/
test("Generate Token ", async () => {
  console.info("*************CREATING TOKEN**********************")
  const apiContext = await request.newContext();
  const apiUtils = new APIUtils(apiContext);
  const tokenCreationResponse = await apiUtils.getToken(
    createTokenData.URL,
    createTokenData.username,
    createTokenData.password
  );
  const tokenCreationResponseJson = await tokenCreationResponse.json()
  await expect(tokenCreationResponse.status()).toBe(200)
  token= tokenCreationResponseJson.token
  console.log("Token Generated: ",token);
  console.info("*************TOKEN CREATED**********************")
});

/*
⁡⁢⁣⁢​‌‍‌𝗧𝗲𝘀𝘁 𝟮​⁡
This test will create new Booking 
This code is a Playwright test that creates a new booking using an API endpoint and validates the response. Here's what it does:

The test function is defined using the test function from the Playwright library.
A message is logged to the console indicating that a new booking is being created.
An API context is created using request.newContext().
An instance of the APIUtils class is created, passing in the apiContext.
A new booking is created using the createBooking() method from the apiUtils object, passing in data for a new booking.
The response body is parsed into JSON format using the .json() method.
The booking ID generated by the server is extracted from the response body.
A message is logged to the console indicating that the booking was successful and providing the booking ID.
The HTTP status code of the response is validated using the expect function from the Jest assertion library.
The firstname, lastname, totalprice, depositpaid, checkin, checkout, and additionalneeds fields of the response payload are validated using the same approach.
The response status text is validated.
A message is logged to the console indicating that the booking was created successfully.
The code tests the functionality of an API endpoint that creates a new booking. By validating the response payload, headers, and status text, the test ensures that the API is functioning as expected.
*/
test("Creating a new booking using token  ", async () => {
  console.info("*************CREATING A NEW BOOKING**********************")
  const apiContext = await request.newContext();
  const apiUtils = new APIUtils(apiContext);
  const createBooking = await apiUtils.createBooking(
    createBookingTestData.URL,
    createBookingTestData.firstname,
    createBookingTestData.lastname,
    createBookingTestData.totalprice,
    createBookingTestData.depositpaid,
    createBookingTestData.checkin,
    createBookingTestData.checkout,
    createBookingTestData.additionalneeds
  );
  const createBookingResponse = await createBooking.json();
  bookingId = await createBookingResponse.bookingid;
  console.log(
    "The booking was successful. Booking ID generated: ",
    await bookingId
  );
  //Validating the Status Code
  await expect(createBooking.status()).toBe(200);

  //Validating the response payload
  await expect(createBookingResponse.booking.firstname).toBe(
    createBookingTestData.firstname
  );
  await expect(createBookingResponse.booking.lastname).toBe(
    createBookingTestData.lastname
  );
  await expect(createBookingResponse.booking.totalprice).toBe(
    createBookingTestData.totalprice
  );
  await expect(createBookingResponse.booking.depositpaid).toBe(
    createBookingTestData.depositpaid
  );
  await expect(createBookingResponse.booking.bookingdates.checkin).toBe(
    createBookingTestData.checkin
  );
  await expect(createBookingResponse.booking.bookingdates.checkout).toBe(
    createBookingTestData.checkout
  );
  await expect(createBookingResponse.booking.additionalneeds).toBe(
    createBookingTestData.additionalneeds
  );

  //Validate response text
  await expect(createBooking.statusText()).toBe("OK");

  console.info("*************BOOKING CREATED**********************")
});

/*
⁡⁢⁣⁢​‌‍‌𝗧𝗲𝘀𝘁 3​⁡
This code is a Playwright test that fetches booking details and validates the response. Here's what it does:

The test function is defined using the test function from the Playwright library.
A message is logged to the console indicating that booking details are being fetched.
An API context is created using request.newContext().
An instance of the APIUtils class is created, passing in the apiContext.
The booking details are fetched using the getBookingDetails() method from the apiUtils object, passing in a URL and bookingId.
The response body is logged to the console.
The response body is parsed into JSON format using the .json() method.
The firstname, lastname, totalprice, depositpaid, checkin, checkout, and additionalneeds fields of the response payload are validated using the expect function from the Jest assertion library.
The response headers are validated using the same approach.
The response status text is validated.
A message is logged to the console indicating that fetching the booking details was successful.
The code tests the functionality of an API endpoint that returns booking details. By validating the response payload, headers, and status text, the test ensures that the API is functioning as expected.
*/

test("Get Booking Details ", async () => {
  console.info("*************FETCHING BOOKING DETAILS**********************")
  const apiContext = await request.newContext();
  const apiUtils = new APIUtils(apiContext);
  bookingDetails = await apiUtils.getBookingDetails(
    getBookingData.URL,
    bookingId
  );
  console.log(bookingDetails);
  const bookingDetailsJson = await bookingDetails.json();
  console.log("The booking details are: ", await bookingDetailsJson);
  console.log(getBookingData.firstname);
  //Validate the http status code
  await expect(bookingDetails.status()).toBe(200);
  //Validate the response payload
  await expect(bookingDetailsJson.firstname).toBe(getBookingData.firstname);
  await expect(bookingDetailsJson.lastname).toBe(getBookingData.lastname);
  await expect(bookingDetailsJson.totalprice).toBe(getBookingData.totalprice);
  await expect(bookingDetailsJson.depositpaid).toBe(getBookingData.depositpaid);
  await expect(bookingDetailsJson.bookingdates.checkin).toBe(
    getBookingData.checkin
  );
  await expect(bookingDetailsJson.bookingdates.checkout).toBe(
    getBookingData.checkout
  );
  await expect(bookingDetailsJson.additionalneeds).toBe(
    getBookingData.additionalneeds
  );

  //Validate the response headers
  const responseHeaders = await bookingDetails.headersArray();
  console.log(responseHeaders);
  await expect(responseHeaders[0].name).toBe("Server");
  await expect(responseHeaders[0].value).toBe("Cowboy");
  await expect(responseHeaders[1].name).toBe("Connection");
  await expect(responseHeaders[1].value).toBe("close");
  await expect(responseHeaders[2].name).toBe("X-Powered-By");
  await expect(responseHeaders[2].value).toBe("Express");
  await expect(responseHeaders[3].name).toBe("Content-Type");
  await expect(responseHeaders[3].value).toBe(
    "application/json; charset=utf-8"
  );
  await expect(responseHeaders[4].name).toBe("Content-Length");
  await expect(responseHeaders[4].value).toBe("168");

  //Validate the response status text
  const responseStatusText = await bookingDetails.statusText();
  await expect(responseStatusText).toBe("OK");
  console.info("*************FETCHING BOOKING DETAILS SUCCESSFUL**********************")
});
